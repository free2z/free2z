// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.cash.z.wallet.sdk.rpc.LightdInfo');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cash.z.wallet.sdk.rpc.LightdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cash.z.wallet.sdk.rpc.LightdInfo.displayName = 'proto.cash.z.wallet.sdk.rpc.LightdInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cash.z.wallet.sdk.rpc.LightdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taddrsupport: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    chainname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    saplingactivationheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    consensusbranchid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockheight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gitcommit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 9, ""),
    builddate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    builduser: jspb.Message.getFieldWithDefault(msg, 11, ""),
    estimatedheight: jspb.Message.getFieldWithDefault(msg, 12, 0),
    zcashdbuild: jspb.Message.getFieldWithDefault(msg, 13, ""),
    zcashdsubversion: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cash.z.wallet.sdk.rpc.LightdInfo;
  return proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTaddrsupport(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSaplingactivationheight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsensusbranchid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitcommit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuilddate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuilduser(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEstimatedheight(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setZcashdbuild(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setZcashdsubversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cash.z.wallet.sdk.rpc.LightdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cash.z.wallet.sdk.rpc.LightdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaddrsupport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getChainname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSaplingactivationheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getConsensusbranchid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGitcommit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBuilddate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBuilduser();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEstimatedheight();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getZcashdbuild();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getZcashdsubversion();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool taddrSupport = 3;
 * @return {boolean}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getTaddrsupport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setTaddrsupport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string chainName = 4;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getChainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setChainname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 saplingActivationHeight = 5;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getSaplingactivationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setSaplingactivationheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string consensusBranchId = 6;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getConsensusbranchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setConsensusbranchid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 blockHeight = 7;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string gitCommit = 8;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getGitcommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setGitcommit = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string branch = 9;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string buildDate = 10;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBuilddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBuilddate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string buildUser = 11;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getBuilduser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setBuilduser = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint64 estimatedHeight = 12;
 * @return {number}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getEstimatedheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setEstimatedheight = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string zcashdBuild = 13;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getZcashdbuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setZcashdbuild = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string zcashdSubversion = 14;
 * @return {string}
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.getZcashdsubversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.cash.z.wallet.sdk.rpc.LightdInfo} returns this
 */
proto.cash.z.wallet.sdk.rpc.LightdInfo.prototype.setZcashdsubversion = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


